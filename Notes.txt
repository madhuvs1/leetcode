LongestConsecutiveSequence -> Input:  [100,4,200,1,3,2]	Output: 4.  Technique: a) Find the anchor (no predecessor | number-1 exists) b) Use HashSet (doesn't allow duplicates)
TwoSum -> Input: [2,7,11,15], target = 9 output: 0,1 (indices provides sum = 9) Technique: HashMap Complement lookup
LongestSubstring: Input: s = "abcabcbb" output: 3 Technique: a) User Left and Right Pointers, Right expands, when there is a duplicate within the Left-Right pointers range, Left Pointer jumps past the duplicate character index.
Longest Palindrome substring: s = "babad" Output: "bab" | s = "abbac" output: abba Technique: Expand around center, a) for odd palindromes start left and right with 1, 
and for even palindromes (cbba) try left with 1 and right with left+1. For any given string try both odd and even, as possible to have even palindrome in odd string.
